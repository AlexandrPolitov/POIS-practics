#lang racket
; Вариант 2
; Написать функцию, которая для заданного списка lst формирует список-результат
; путем объединения результата реверсирования lst, результата
; реверсирования хвоста lst, результата реверсирования хвоста lst и так
; далее. Пример выполнения: для списка ‘(1 2 3 4 5 6) результатом будет:
; ‘(6 5 4 3 2 1 6 5 4 3 2 6 5 4 3 6 5 4 6 5 6).
(define (revAndSum lst)
  (if ( null? lst)
      lst
      (append (reverse lst) (revAndSum (cdr lst)))))
(revAndSum '(1 2 3 4 5 6))

; Вариант 5
; Описать функцию, которая на основе списка чисел формирует список-результат
; следующим образом: первый элемент есть произведение
; элементов списка, второй – произведение элементов хвоста, третий –
; произведение элементов хвоста и так далее. Пример: для списка ‘(1 2 3
; 4 5 6) результатом будет : ‘(720 720 360 120 30 6).
(define (getMultiElems lst)
  (if (null? lst)
      1
      (* (car lst)(getMultiElems (cdr lst)))))

(define (getList lst)
  (map (lambda(tmp)(getMultiElems(member tmp lst))) lst))

(getList '(1 2 3 4 5 6))

; Вариант 16
; Описать функцию, аргументами которой являются два списка, а
; результатом список, содержащий элементы первого списка, не
; принадлежащие второму списку
(define (notInclude lst1 lst2)
      (if ( null? lst1)
      lst1
      (append (if(member (car lst1) lst2) '() (list(car lst1))) (notInclude (cdr lst1) lst2))))

(notInclude '(1 2 3 4 5 6 7 8) '(3 5 7))

